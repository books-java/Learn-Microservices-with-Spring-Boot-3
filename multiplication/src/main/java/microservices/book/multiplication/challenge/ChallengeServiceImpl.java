package microservices.book.multiplication.challenge;

import java.util.List;

import org.springframework.stereotype.Service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import microservices.book.multiplication.serviceclients.ChallengeEventPub;
import microservices.book.multiplication.user.User;
import microservices.book.multiplication.user.UserRepository;

@Slf4j
@RequiredArgsConstructor
@Service
public class ChallengeServiceImpl implements ChallengeService {

    private final UserRepository userRepository;
    private final ChallengeAttemptRepository attemptRepository;
    private final ChallengeEventPub challengeEventPub;

    @Override
    public ChallengeAttempt verifyAttempt(ChallengeAttemptDTO attemptDTO) {
        // Check if the user already exists for that alias, otherwise create it
        User user = userRepository
                .findByAlias(attemptDTO.getUserAlias())
                .orElseGet(() -> {
                    log.info("Creating new user with alias {}", attemptDTO.getUserAlias());
                    return userRepository.save(new User(attemptDTO.getUserAlias()));
                });

        // Check if the attempt is correct
        boolean isCorrect = attemptDTO.getGuess() == attemptDTO.getFactorA() * attemptDTO.getFactorB();

        // Builds the domain object. Null id since it'll be generated by the DB.
        ChallengeAttempt checkedAttempt = new ChallengeAttempt(null,
                user,
                attemptDTO.getFactorA(),
                attemptDTO.getFactorB(),
                attemptDTO.getGuess(),
                isCorrect);

        // Stores the attempt
        ChallengeAttempt storedAttempt = attemptRepository.save(checkedAttempt);
        // Publishes an event to notify potentially interested subscribers
        /*
         * if brocker is down you’ll get an HTTP error response from the
         * server since you didn’t catch any potential exception within the publisher,
         * nor in the
         * main service logic located at ChallengeServiceImpl. You could add a try/catch
         * clause,
         * so you are still able to respond. The strategy would be to suppress the error
         * silently.
         * A possibly better approach is to implement a custom HTTP error handler to
         * return a
         * specific error response such as 503 SERVICE UNAVAILABLE to indicate that the
         * system is
         * not operational when you lose connection with the broker. As you see, you
         * have multiple
         * options
         * In a real organization, the best approach is to discuss these alternatives
         * and
         * choose the one that best suits your nonfunctional requirements, like
         * availability (you
         * want to have the challenge features available as much as possible) or data
         * integrity (you
         * want to always have a score for every sent attempt)
         */
        /*
         * if the broker is down the attempt will be stored even though you got an error
         * response
         * HTTP/1.1 500
         * This is a bad practice because the API
         * client doesn’t know the result of the challenge, so it can’t display a proper
         * message. Yet
         * the challenge has been saved. However, it’s the expected outcome provided
         * that your
         * code persists with the object before trying to send the message to the
         * broker.
         * Instead, you could treat the whole logic included in the verifyAttempt
         * service
         * method as a transaction. A database transaction can be rolled back (not
         * executed).
         * That’s what you want if you get an error even after calling the save method
         * in the
         * repository. Doing this is easy with the Spring framework since you just need
         * to add a
         * Jakarta Transactions annotation to your code,
         * jakarta.transaction.Transactional.
         * 
         * @Transactional
         * 
         * @Override
         * public ChallengeAttempt verifyAttempt(ChallengeAttemptDTO attemptDTO) {
         * }
         * If there is an exception in a method annotated with @Transactional, the
         * transaction will be rolled back. If you need all your methods within a given
         * service to be
         * transactional, you can add this annotation at the class level instead
         */
        /*
         * You can try the same scenario steps after applying this change. Build and
         * restart the
         * Multiplication microservice and send a new attempt while the broker is down,
         * this time
         * with a different alias. If you run the corresponding query to see if the
         * attempt was stored,
         * you’ll find that this time it isn’t. Spring rolls back the database operation
         * due to the
         * thrown exception, so it’s never performed.
         * 
         */
        challengeEventPub.challengeSolved(storedAttempt);

        return storedAttempt;
    }

    /**
     * Gets the statistics for a given user.
     * *
     * 
     * @param userAlias the user's alias
     * @return a list of the last 10 {@link ChallengeAttempt}
     *         objects created by the user.
     */
    @Override
    public List<ChallengeAttempt> getStatsForUser(final String userAlias) {
        return attemptRepository.findTop10ByUserAliasOrderByIdDesc(userAlias);
    }
}